{"ast":null,"code":"var _jsxFileName = \"/Users/abhi/Library/CloudStorage/OneDrive-OregonStateUniversity/Jaaidat/KNOWLEDGE/Udemy Spring Course/React/frontend-01/todo-app/src/components/todo/security/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useContext, useState } from \"react\";\n\n// Create a context and export it so that it is accessible to other components\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  return useContext(AuthContext);\n};\n\n// share the context with other components, children is all the components under AuthProvider\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport default function AuthProvider({\n  children\n}) {\n  _s2();\n  // put some state in the context\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [username, setUsername] = useState(null);\n\n  // function login(username, password) {\n  //     if (username==='Abhi' && password==='patel') {\n  //         setIsAuthenticated(true)\n  //         setUsername(username)\n  //         return true\n  //     } else {\n  //         setIsAuthenticated(false)\n  //         setUsername(null)\n  //         return false\n  //     }\n  // }\n\n  function login(username, password) {\n    const token = \"Basic \" + window.btoa(username + \":\" + password);\n    executeBasicAuthenticationService(token).then(response => console.log(response)).catch(error => console.log(error));\n\n    // if (username==='Abhi' && password==='patel') {\n    //     setIsAuthenticated(true)\n    //     setUsername(username)\n    //     return true\n    // } else {\n    //     setIsAuthenticated(false)\n    //     setUsername(null)\n    //     return false\n    // }\n  }\n  function logout() {\n    setIsAuthenticated(false);\n  }\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      isAuthenticated,\n      login,\n      logout,\n      username\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 9\n  }, this);\n}\n_s2(AuthProvider, \"laYTpZuX2xbU1DFqqsUVzF6NNqo=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["createContext","useContext","useState","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","AuthProvider","children","_s2","isAuthenticated","setIsAuthenticated","username","setUsername","login","password","token","window","btoa","executeBasicAuthenticationService","then","response","console","log","catch","error","logout","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/abhi/Library/CloudStorage/OneDrive-OregonStateUniversity/Jaaidat/KNOWLEDGE/Udemy Spring Course/React/frontend-01/todo-app/src/components/todo/security/AuthContext.js"],"sourcesContent":["import { createContext, useContext, useState } from \"react\";\n\n// Create a context and export it so that it is accessible to other components\nexport const AuthContext = createContext()\nexport const useAuth = () => useContext(AuthContext)\n\n// share the context with other components, children is all the components under AuthProvider\nexport default function AuthProvider({ children }) {\n\n    // put some state in the context\n    const [isAuthenticated, setIsAuthenticated] = useState(false)\n    \n    const [username, setUsername] = useState(null)\n\n    // function login(username, password) {\n    //     if (username==='Abhi' && password==='patel') {\n    //         setIsAuthenticated(true)\n    //         setUsername(username)\n    //         return true\n    //     } else {\n    //         setIsAuthenticated(false)\n    //         setUsername(null)\n    //         return false\n    //     }\n    // }\n\n    function login(username, password) {\n\n        const token = \"Basic \" + window.btoa(username+\":\"+password)\n\n        executeBasicAuthenticationService(token)\n            .then(response => console.log(response))\n            .catch(error => console.log(error))\n        \n        // if (username==='Abhi' && password==='patel') {\n        //     setIsAuthenticated(true)\n        //     setUsername(username)\n        //     return true\n        // } else {\n        //     setIsAuthenticated(false)\n        //     setUsername(null)\n        //     return false\n        // }\n    }\n\n    function logout() {\n        setIsAuthenticated(false)\n    }\n\n    return (\n        <AuthContext.Provider value={ {isAuthenticated, login, logout, username} }>\n            {children}\n        </AuthContext.Provider>\n    );\n}"],"mappings":";;;AAAA,SAASA,aAAa,EAAEC,UAAU,EAAEC,QAAQ,QAAQ,OAAO;;AAE3D;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,OAAO,MAAMC,WAAW,gBAAGL,aAAa,CAAC,CAAC;AAC1C,OAAO,MAAMM,OAAO,GAAGA,CAAA;EAAAC,EAAA;EAAA,OAAMN,UAAU,CAACI,WAAW,CAAC;AAAA;;AAEpD;AAAAE,EAAA,CAFaD,OAAO;AAGpB,eAAe,SAASE,YAAYA,CAAC;EAAEC;AAAS,CAAC,EAAE;EAAAC,GAAA;EAE/C;EACA,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;EAE7D,MAAM,CAACW,QAAQ,EAAEC,WAAW,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;;EAE9C;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,SAASa,KAAKA,CAACF,QAAQ,EAAEG,QAAQ,EAAE;IAE/B,MAAMC,KAAK,GAAG,QAAQ,GAAGC,MAAM,CAACC,IAAI,CAACN,QAAQ,GAAC,GAAG,GAACG,QAAQ,CAAC;IAE3DI,iCAAiC,CAACH,KAAK,CAAC,CACnCI,IAAI,CAACC,QAAQ,IAAIC,OAAO,CAACC,GAAG,CAACF,QAAQ,CAAC,CAAC,CACvCG,KAAK,CAACC,KAAK,IAAIH,OAAO,CAACC,GAAG,CAACE,KAAK,CAAC,CAAC;;IAEvC;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EACJ;EAEA,SAASC,MAAMA,CAAA,EAAG;IACdf,kBAAkB,CAAC,KAAK,CAAC;EAC7B;EAEA,oBACIR,OAAA,CAACC,WAAW,CAACuB,QAAQ;IAACC,KAAK,EAAG;MAAClB,eAAe;MAAEI,KAAK;MAAEY,MAAM;MAAEd;IAAQ,CAAG;IAAAJ,QAAA,EACrEA;EAAQ;IAAAqB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACS,CAAC;AAE/B;AAACvB,GAAA,CA/CuBF,YAAY;AAAA0B,EAAA,GAAZ1B,YAAY;AAAA,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}